start: statement*

statement: ((expression | assignment | return | let_stmt) _terminator) | block_stmt

user_type: ":" expression

let_stmt: "let" MUT? identifier user_type? "=" expression
MUT: "mut"
assignment: identifier "=" expression

return: "return" expression

block_stmt: _block
_block: "{" statement* "}" // TODO: There is no such thing as a block expression right now

while_stmt: "while" _block

expression: literal | identifier | binary_expression | unary_expression | grouped_expression
grouped_expression: "(" expression ")"


// TODO: Merge everything like this to handle precedence accurately

// lowest precedence
binary_expression: \
expression or expression
| expression and expression

| expression equals expression
| expression not_equals expression

| expression less expression
| expression lesseq expression
| expression greater expression
| expression greatereq expression

| expression plus expression
| expression minus expression

| expression modulus expression
| expression star expression
| expression slash expression

| expression dot expression
// highest precedence


dot: "."
star: "*"
slash: "/"
minus: "-"
plus: "+"
modulus: "%"
and: "and"
or: "or"

equals: "=="
not_equals: "!="
less: "<"
lesseq: "<="
greater: ">"
greatereq: ">="


unary_expression: unary_operator? expression
?unary_operator: minus | plus | not | ampersand | star
not: "not"
ampersand: "&"


identifier: /[a-zA-Z](\w|\d)*/

pub_modifier: "pub"

typed_arg: identifier user_type
return_type: expression

?literal: bool | number | string
!bool: "true" | "false"
?number: integer | decimal
integer: /\d+/
decimal: /\d+\.\d+/
string: "\"" /[^"]+/? "\""
// TODO: char

_terminator: ";"

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

%ignore /\n/

%import common.WS_INLINE
%ignore WS_INLINE
