start: (function | line)+

//start: function

?line: (expression | assignment | return | define) ";"?

define: "let" MUT? assignment
MUT: "mut"
assignment: id "=" expression

return: "return" expression

block: "{" line+ "}"
?match_block: "{" ((/else/ | expression) "=>" expression ","?)+ "}"

?expression: (uncontained_expression | contained_expression)
?uncontained_expression: if_block | if_expression | block | literal | id | operation | comparison | function_call
?contained_expression: "(" expression ")"

function_call: id "(" function_args ")"
function_args: ((id "=")? expression ","?)+

if_expression: if_condition (else_if+)? else?
if_condition: "if" expression (condition_operation+)? block
else_if: "else" if_condition
else: "else" block

condition_operation: condition_operator expression
?condition_operator: and | or
and: "and"
or: "or"

if_block: "if" match_block

id: /[a-zA-Z](\w|\d)*/
?id_literal: literal | id

function: "fn" id function_def_args type block
?function_def_args: "(" (typed_arg ","?)+ ")"

typed_arg: id ":" type

type: id ("|" id)? 

operation: id_literal (operator id_literal)+
operator: add | sub | divide | multiply | modulus
add: "+"
sub: "-"
divide: "/"
multiply: "*"
modulus: "%"

comparison: expression (comparitor id_literal)+
?comparitor: less | greater | equal | less_or_equal | greater_or_equal
less: "<"
greater: ">"
equal: "=="
less_or_equal: less "="
greater_or_equal: greater "="

literal: bool | number | string
!bool: "true" | "false"
number: /\d+/
string: "\"" /[^"]+/? "\""

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

%ignore /\n/

%import common.WS_INLINE
%ignore WS_INLINE
