start: statement*

statement: (expression | assignment | return | let_stmt | function_definition) terminator?

let_stmt: "let" MUT? identifier (":" expression)? "=" expression
MUT: "mut"
assignment: identifier "=" expression

return: "return" expression

block: "{" statement* "}"

expression: if_expression | block | literal | identifier | function_call | binary_expression | unary_expression | grouped_expression
grouped_expression: "(" expression ")"

function_call: identifier "(" function_args? ")"
function_args: ((identifier "=")? expression ","?)+

if_expression: if_condition (else_if+)? else?
if_condition: "if" expression block
else_if: "else" if_condition
else: "else" block


binary_expression: expression binary_operator expression
?binary_operator: or | and | plus | minus | modulus | star | slash | dot
dot: "."
star: "*"
slash: "/"
minus: "-"
plus: "+"
modulus: "%"
and: "and"
or: "or"

unary_expression: unary_operator? expression
?unary_operator: minus | plus | not | ampersand | star
not: "not"
ampersand: "&"


identifier: /[a-zA-Z](\w|\d)*/

function_definition: pub_modifier? "fn" identifier function_def_args type? block
function_def_args: "(" (typed_arg ","?)+ ")"

pub_modifier: "pub"

typed_arg: identifier ":" type

type: ampersand? MUT? identifier 

?literal: bool | number | string
!bool: "true" | "false"
?number: integer | decimal
integer: /\d+/
decimal: integer? "." integer
string: "\"" /[^"]+/? "\""

terminator: ";"

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

%ignore /\n/

%import common.WS_INLINE
%ignore WS_INLINE
