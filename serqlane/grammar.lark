start: statement*

statement: (expression | assignment | return | let_stmt | function_definition) terminator

user_type: ":" expression

let_stmt: "let" MUT? identifier user_type? "=" expression
MUT: "mut"
assignment: identifier "=" expression

return: "return" expression

block: "{" statement* "}"

expression: if_expression | block | literal | identifier | function_call | binary_expression | unary_expression | grouped_expression
grouped_expression: "(" expression ")"

function_call: identifier "(" function_args? ")"
function_args: ((identifier "=")? expression ","?)+

if_expression: if_condition (else_if+)? else?
if_condition: "if" expression block
else_if: "else" if_condition
else: "else" block


// TODO: Merge everything like this to handle precedence accurately

// lowest precedence
binary_expression: \
expression or expression
| expression and expression

| expression equals expression
| expression not_equals expression

| expression less expression
| expression lesseq expression
| expression greater expression
| expression greatereq expression

| expression plus expression
| expression minus expression

| expression modulus expression
| expression star expression
| expression slash expression

| expression dot expression
// highest precedence


dot: "."
star: "*"
slash: "/"
minus: "-"
plus: "+"
modulus: "%"
and: "and"
or: "or"

equals: "=="
not_equals: "!="
less: "<"
lesseq: "<="
greater: ">"
greatereq: ">="


unary_expression: unary_operator? expression
?unary_operator: minus | plus | not | ampersand | star
not: "not"
ampersand: "&"


identifier: /[a-zA-Z](\w|\d)*/

function_definition: pub_modifier? "fn" identifier function_def_args return_type? block
function_def_args: "(" (typed_arg ","?)+ ")"

pub_modifier: "pub"

typed_arg: identifier user_type
return_type: expression

?literal: bool | number | string
!bool: "true" | "false"
?number: integer | decimal
integer: /\d+/
decimal: /\d+\.\d+/
string: "\"" /[^"]+/? "\""
// TODO: char

?terminator: ";"

COMMENT: /\s*/ "//" /[^\n]/*
%ignore COMMENT

%ignore /\n/

%import common.WS_INLINE
%ignore WS_INLINE
